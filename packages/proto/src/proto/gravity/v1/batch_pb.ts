// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file gravity/v1/batch.proto (package gravity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ERC20Token } from "./attestation_pb.js";

/**
 * OutgoingTxBatch represents a batch of transactions going from gravity to ETH
 *
 * @generated from message gravity.v1.OutgoingTxBatch
 */
export class OutgoingTxBatch extends Message<OutgoingTxBatch> {
  /**
   * @generated from field: uint64 batch_nonce = 1;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_timeout = 2;
   */
  batchTimeout = protoInt64.zero;

  /**
   * @generated from field: repeated gravity.v1.OutgoingTransferTx transactions = 3;
   */
  transactions: OutgoingTransferTx[] = [];

  /**
   * @generated from field: string token_contract = 4;
   */
  tokenContract = "";

  /**
   * @generated from field: uint64 cosmos_block_created = 5;
   */
  cosmosBlockCreated = protoInt64.zero;

  constructor(data?: PartialMessage<OutgoingTxBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.OutgoingTxBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "batch_timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "transactions", kind: "message", T: OutgoingTransferTx, repeated: true },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cosmos_block_created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutgoingTxBatch {
    return new OutgoingTxBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutgoingTxBatch {
    return new OutgoingTxBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutgoingTxBatch {
    return new OutgoingTxBatch().fromJsonString(jsonString, options);
  }

  static equals(a: OutgoingTxBatch | PlainMessage<OutgoingTxBatch> | undefined, b: OutgoingTxBatch | PlainMessage<OutgoingTxBatch> | undefined): boolean {
    return proto3.util.equals(OutgoingTxBatch, a, b);
  }
}

/**
 * OutgoingTransferTx represents an individual send from gravity to ETH
 *
 * @generated from message gravity.v1.OutgoingTransferTx
 */
export class OutgoingTransferTx extends Message<OutgoingTransferTx> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string dest_address = 3;
   */
  destAddress = "";

  /**
   * @generated from field: gravity.v1.ERC20Token erc20_token = 4;
   */
  erc20Token?: ERC20Token;

  /**
   * @generated from field: gravity.v1.ERC20Token erc20_fee = 5;
   */
  erc20Fee?: ERC20Token;

  constructor(data?: PartialMessage<OutgoingTransferTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.OutgoingTransferTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dest_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "erc20_token", kind: "message", T: ERC20Token },
    { no: 5, name: "erc20_fee", kind: "message", T: ERC20Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutgoingTransferTx {
    return new OutgoingTransferTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutgoingTransferTx {
    return new OutgoingTransferTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutgoingTransferTx {
    return new OutgoingTransferTx().fromJsonString(jsonString, options);
  }

  static equals(a: OutgoingTransferTx | PlainMessage<OutgoingTransferTx> | undefined, b: OutgoingTransferTx | PlainMessage<OutgoingTransferTx> | undefined): boolean {
    return proto3.util.equals(OutgoingTransferTx, a, b);
  }
}

/**
 * OutgoingLogicCall represents an individual logic call from gravity to ETH
 *
 * @generated from message gravity.v1.OutgoingLogicCall
 */
export class OutgoingLogicCall extends Message<OutgoingLogicCall> {
  /**
   * @generated from field: repeated gravity.v1.ERC20Token transfers = 1;
   */
  transfers: ERC20Token[] = [];

  /**
   * @generated from field: repeated gravity.v1.ERC20Token fees = 2;
   */
  fees: ERC20Token[] = [];

  /**
   * @generated from field: string logic_contract_address = 3;
   */
  logicContractAddress = "";

  /**
   * @generated from field: bytes payload = 4;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: uint64 timeout = 5;
   */
  timeout = protoInt64.zero;

  /**
   * @generated from field: bytes invalidation_id = 6;
   */
  invalidationId = new Uint8Array(0);

  /**
   * @generated from field: uint64 invalidation_nonce = 7;
   */
  invalidationNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 cosmos_block_created = 8;
   */
  cosmosBlockCreated = protoInt64.zero;

  constructor(data?: PartialMessage<OutgoingLogicCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.OutgoingLogicCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transfers", kind: "message", T: ERC20Token, repeated: true },
    { no: 2, name: "fees", kind: "message", T: ERC20Token, repeated: true },
    { no: 3, name: "logic_contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "invalidation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "invalidation_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "cosmos_block_created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutgoingLogicCall {
    return new OutgoingLogicCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutgoingLogicCall {
    return new OutgoingLogicCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutgoingLogicCall {
    return new OutgoingLogicCall().fromJsonString(jsonString, options);
  }

  static equals(a: OutgoingLogicCall | PlainMessage<OutgoingLogicCall> | undefined, b: OutgoingLogicCall | PlainMessage<OutgoingLogicCall> | undefined): boolean {
    return proto3.util.equals(OutgoingLogicCall, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventOutgoingBatchCanceled
 */
export class EventOutgoingBatchCanceled extends Message<EventOutgoingBatchCanceled> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: string bridge_chain_id = 2;
   */
  bridgeChainId = "";

  /**
   * @generated from field: string batch_id = 3;
   */
  batchId = "";

  /**
   * @generated from field: string nonce = 4;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventOutgoingBatchCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventOutgoingBatchCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "batch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingBatchCanceled | PlainMessage<EventOutgoingBatchCanceled> | undefined, b: EventOutgoingBatchCanceled | PlainMessage<EventOutgoingBatchCanceled> | undefined): boolean {
    return proto3.util.equals(EventOutgoingBatchCanceled, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventOutgoingBatch
 */
export class EventOutgoingBatch extends Message<EventOutgoingBatch> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: string bridge_chain_id = 2;
   */
  bridgeChainId = "";

  /**
   * @generated from field: string batch_id = 3;
   */
  batchId = "";

  /**
   * @generated from field: string nonce = 4;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventOutgoingBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventOutgoingBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "batch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingBatch | PlainMessage<EventOutgoingBatch> | undefined, b: EventOutgoingBatch | PlainMessage<EventOutgoingBatch> | undefined): boolean {
    return proto3.util.equals(EventOutgoingBatch, a, b);
  }
}

