// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file gravity/v1/pool.proto (package gravity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * IDSet represents a set of IDs
 *
 * @generated from message gravity.v1.IDSet
 */
export class IDSet extends Message<IDSet> {
  /**
   * @generated from field: repeated uint64 ids = 1;
   */
  ids: bigint[] = [];

  constructor(data?: PartialMessage<IDSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.IDSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDSet {
    return new IDSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDSet {
    return new IDSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDSet {
    return new IDSet().fromJsonString(jsonString, options);
  }

  static equals(a: IDSet | PlainMessage<IDSet> | undefined, b: IDSet | PlainMessage<IDSet> | undefined): boolean {
    return proto3.util.equals(IDSet, a, b);
  }
}

/**
 * @generated from message gravity.v1.BatchFees
 */
export class BatchFees extends Message<BatchFees> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string total_fees = 2;
   */
  totalFees = "";

  /**
   * @generated from field: uint64 tx_count = 3;
   */
  txCount = protoInt64.zero;

  constructor(data?: PartialMessage<BatchFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.BatchFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_fees", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tx_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchFees {
    return new BatchFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchFees {
    return new BatchFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchFees {
    return new BatchFees().fromJsonString(jsonString, options);
  }

  static equals(a: BatchFees | PlainMessage<BatchFees> | undefined, b: BatchFees | PlainMessage<BatchFees> | undefined): boolean {
    return proto3.util.equals(BatchFees, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventWithdrawalReceived
 */
export class EventWithdrawalReceived extends Message<EventWithdrawalReceived> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: string bridge_chain_id = 2;
   */
  bridgeChainId = "";

  /**
   * @generated from field: string outgoing_tx_id = 3;
   */
  outgoingTxId = "";

  /**
   * @generated from field: string nonce = 4;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventWithdrawalReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventWithdrawalReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "outgoing_tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWithdrawalReceived {
    return new EventWithdrawalReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWithdrawalReceived {
    return new EventWithdrawalReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWithdrawalReceived {
    return new EventWithdrawalReceived().fromJsonString(jsonString, options);
  }

  static equals(a: EventWithdrawalReceived | PlainMessage<EventWithdrawalReceived> | undefined, b: EventWithdrawalReceived | PlainMessage<EventWithdrawalReceived> | undefined): boolean {
    return proto3.util.equals(EventWithdrawalReceived, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventWithdrawCanceled
 */
export class EventWithdrawCanceled extends Message<EventWithdrawCanceled> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string tx_id = 2;
   */
  txId = "";

  /**
   * @generated from field: string bridge_contract = 3;
   */
  bridgeContract = "";

  /**
   * @generated from field: string bridge_chain_id = 4;
   */
  bridgeChainId = "";

  constructor(data?: PartialMessage<EventWithdrawCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventWithdrawCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bridge_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWithdrawCanceled {
    return new EventWithdrawCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWithdrawCanceled {
    return new EventWithdrawCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWithdrawCanceled {
    return new EventWithdrawCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: EventWithdrawCanceled | PlainMessage<EventWithdrawCanceled> | undefined, b: EventWithdrawCanceled | PlainMessage<EventWithdrawCanceled> | undefined): boolean {
    return proto3.util.equals(EventWithdrawCanceled, a, b);
  }
}

