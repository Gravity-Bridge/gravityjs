// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file gravity/v1/msgs.proto (package gravity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { BridgeValidator } from "./types_pb.js";

/**
 * MsgSetOrchestratorAddress
 * this message allows validators to delegate their voting responsibilities
 * to a given key. This key is then used as an optional authentication method
 * for sigining oracle claims
 * VALIDATOR
 * The validator field is a cosmosvaloper1... string (i.e. sdk.ValAddress)
 * that references a validator in the active set
 * ORCHESTRATOR
 * The orchestrator field is a cosmos1... string  (i.e. sdk.AccAddress) that
 * references the key that is being delegated to
 * ETH_ADDRESS
 * This is a hex encoded 0x Ethereum public key that will be used by this validator
 * on Ethereum
 *
 * @generated from message gravity.v1.MsgSetOrchestratorAddress
 */
export class MsgSetOrchestratorAddress extends Message<MsgSetOrchestratorAddress> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string orchestrator = 2;
   */
  orchestrator = "";

  /**
   * @generated from field: string eth_address = 3;
   */
  ethAddress = "";

  constructor(data?: PartialMessage<MsgSetOrchestratorAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSetOrchestratorAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOrchestratorAddress {
    return new MsgSetOrchestratorAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddress {
    return new MsgSetOrchestratorAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddress {
    return new MsgSetOrchestratorAddress().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOrchestratorAddress | PlainMessage<MsgSetOrchestratorAddress> | undefined, b: MsgSetOrchestratorAddress | PlainMessage<MsgSetOrchestratorAddress> | undefined): boolean {
    return proto3.util.equals(MsgSetOrchestratorAddress, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgSetOrchestratorAddressResponse
 */
export class MsgSetOrchestratorAddressResponse extends Message<MsgSetOrchestratorAddressResponse> {
  constructor(data?: PartialMessage<MsgSetOrchestratorAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSetOrchestratorAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOrchestratorAddressResponse {
    return new MsgSetOrchestratorAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddressResponse {
    return new MsgSetOrchestratorAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddressResponse {
    return new MsgSetOrchestratorAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOrchestratorAddressResponse | PlainMessage<MsgSetOrchestratorAddressResponse> | undefined, b: MsgSetOrchestratorAddressResponse | PlainMessage<MsgSetOrchestratorAddressResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetOrchestratorAddressResponse, a, b);
  }
}

/**
 * MsgValsetConfirm
 * this is the message sent by the validators when they wish to submit their
 * signatures over the validator set at a given block height. A validator must
 * first call MsgSetEthAddress to set their Ethereum address to be used for
 * signing. Then someone (anyone) must make a ValsetRequest, the request is
 * essentially a messaging mechanism to determine which block all validators
 * should submit signatures over. Finally validators sign the validator set,
 * powers, and Ethereum addresses of the entire validator set at the height of a
 * ValsetRequest and submit that signature with this message.
 *
 * If a sufficient number of validators (66% of voting power) (A) have set
 * Ethereum addresses and (B) submit ValsetConfirm messages with their
 * signatures it is then possible for anyone to view these signatures in the
 * chain store and submit them to Ethereum to update the validator set
 * -------------
 *
 * @generated from message gravity.v1.MsgValsetConfirm
 */
export class MsgValsetConfirm extends Message<MsgValsetConfirm> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: string orchestrator = 2;
   */
  orchestrator = "";

  /**
   * @generated from field: string eth_address = 3;
   */
  ethAddress = "";

  /**
   * @generated from field: string signature = 4;
   */
  signature = "";

  constructor(data?: PartialMessage<MsgValsetConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgValsetConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetConfirm | PlainMessage<MsgValsetConfirm> | undefined, b: MsgValsetConfirm | PlainMessage<MsgValsetConfirm> | undefined): boolean {
    return proto3.util.equals(MsgValsetConfirm, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgValsetConfirmResponse
 */
export class MsgValsetConfirmResponse extends Message<MsgValsetConfirmResponse> {
  constructor(data?: PartialMessage<MsgValsetConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgValsetConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetConfirmResponse | PlainMessage<MsgValsetConfirmResponse> | undefined, b: MsgValsetConfirmResponse | PlainMessage<MsgValsetConfirmResponse> | undefined): boolean {
    return proto3.util.equals(MsgValsetConfirmResponse, a, b);
  }
}

/**
 * MsgSendToEth
 * This is the message that a user calls when they want to bridge an asset
 * it will later be removed when it is included in a batch and successfully
 * submitted tokens are removed from the users balance immediately
 * -------------
 * AMOUNT:
 * the coin to send across the bridge, note the restriction that this is a
 * single coin not a set of coins that is normal in other Cosmos messages
 * BRIDGE_FEE:
 * the fee paid for the bridge, distinct from the fee paid to the chain to
 * actually send this message in the first place. So a successful send has
 * two layers of fees for the user
 * CHAIN_FEE:
 * the fee paid to the chain for handling the request, which must be a
 * certain percentage of the AMOUNT, as determined by governance.
 * This Msg will be rejected if CHAIN_FEE is insufficient.
 *
 * @generated from message gravity.v1.MsgSendToEth
 */
export class MsgSendToEth extends Message<MsgSendToEth> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string eth_dest = 2;
   */
  ethDest = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin bridge_fee = 4;
   */
  bridgeFee?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin chain_fee = 5;
   */
  chainFee?: Coin;

  constructor(data?: PartialMessage<MsgSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eth_dest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "bridge_fee", kind: "message", T: Coin },
    { no: 5, name: "chain_fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToEth | PlainMessage<MsgSendToEth> | undefined, b: MsgSendToEth | PlainMessage<MsgSendToEth> | undefined): boolean {
    return proto3.util.equals(MsgSendToEth, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgSendToEthResponse
 */
export class MsgSendToEthResponse extends Message<MsgSendToEthResponse> {
  constructor(data?: PartialMessage<MsgSendToEthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSendToEthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToEthResponse | PlainMessage<MsgSendToEthResponse> | undefined, b: MsgSendToEthResponse | PlainMessage<MsgSendToEthResponse> | undefined): boolean {
    return proto3.util.equals(MsgSendToEthResponse, a, b);
  }
}

/**
 * MsgRequestBatch
 * this is a message anyone can send that requests a batch of transactions to
 * send across the bridge be created for whatever block height this message is
 * included in. This acts as a coordination point, the handler for this message
 * looks at the AddToOutgoingPool tx's in the store and generates a batch, also
 * available in the store tied to this message. The validators then grab this
 * batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
 * can finally submit the batch
 * -------------
 *
 * @generated from message gravity.v1.MsgRequestBatch
 */
export class MsgRequestBatch extends Message<MsgRequestBatch> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgRequestBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgRequestBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBatch | PlainMessage<MsgRequestBatch> | undefined, b: MsgRequestBatch | PlainMessage<MsgRequestBatch> | undefined): boolean {
    return proto3.util.equals(MsgRequestBatch, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgRequestBatchResponse
 */
export class MsgRequestBatchResponse extends Message<MsgRequestBatchResponse> {
  constructor(data?: PartialMessage<MsgRequestBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgRequestBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBatchResponse | PlainMessage<MsgRequestBatchResponse> | undefined, b: MsgRequestBatchResponse | PlainMessage<MsgRequestBatchResponse> | undefined): boolean {
    return proto3.util.equals(MsgRequestBatchResponse, a, b);
  }
}

/**
 * MsgConfirmBatch
 * When validators observe a MsgRequestBatch they form a batch by ordering
 * transactions currently in the txqueue in order of highest to lowest fee,
 * cutting off when the batch either reaches a hardcoded maximum size (to be
 * decided, probably around 100) or when transactions stop being profitable
 * (TODO determine this without nondeterminism) This message includes the batch
 * as well as an Ethereum signature over this batch by the validator
 * -------------
 *
 * @generated from message gravity.v1.MsgConfirmBatch
 */
export class MsgConfirmBatch extends Message<MsgConfirmBatch> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 2;
   */
  tokenContract = "";

  /**
   * @generated from field: string eth_signer = 3;
   */
  ethSigner = "";

  /**
   * @generated from field: string orchestrator = 4;
   */
  orchestrator = "";

  /**
   * @generated from field: string signature = 5;
   */
  signature = "";

  constructor(data?: PartialMessage<MsgConfirmBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgConfirmBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmBatch | PlainMessage<MsgConfirmBatch> | undefined, b: MsgConfirmBatch | PlainMessage<MsgConfirmBatch> | undefined): boolean {
    return proto3.util.equals(MsgConfirmBatch, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgConfirmBatchResponse
 */
export class MsgConfirmBatchResponse extends Message<MsgConfirmBatchResponse> {
  constructor(data?: PartialMessage<MsgConfirmBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgConfirmBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmBatchResponse | PlainMessage<MsgConfirmBatchResponse> | undefined, b: MsgConfirmBatchResponse | PlainMessage<MsgConfirmBatchResponse> | undefined): boolean {
    return proto3.util.equals(MsgConfirmBatchResponse, a, b);
  }
}

/**
 * MsgConfirmLogicCall
 * When validators observe a MsgRequestBatch they form a batch by ordering
 * transactions currently in the txqueue in order of highest to lowest fee,
 * cutting off when the batch either reaches a hardcoded maximum size (to be
 * decided, probably around 100) or when transactions stop being profitable
 * (TODO determine this without nondeterminism) This message includes the batch
 * as well as an Ethereum signature over this batch by the validator
 * -------------
 *
 * @generated from message gravity.v1.MsgConfirmLogicCall
 */
export class MsgConfirmLogicCall extends Message<MsgConfirmLogicCall> {
  /**
   * @generated from field: string invalidation_id = 1;
   */
  invalidationId = "";

  /**
   * @generated from field: uint64 invalidation_nonce = 2;
   */
  invalidationNonce = protoInt64.zero;

  /**
   * @generated from field: string eth_signer = 3;
   */
  ethSigner = "";

  /**
   * @generated from field: string orchestrator = 4;
   */
  orchestrator = "";

  /**
   * @generated from field: string signature = 5;
   */
  signature = "";

  constructor(data?: PartialMessage<MsgConfirmLogicCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgConfirmLogicCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invalidation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "invalidation_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "eth_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmLogicCall {
    return new MsgConfirmLogicCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmLogicCall {
    return new MsgConfirmLogicCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmLogicCall {
    return new MsgConfirmLogicCall().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmLogicCall | PlainMessage<MsgConfirmLogicCall> | undefined, b: MsgConfirmLogicCall | PlainMessage<MsgConfirmLogicCall> | undefined): boolean {
    return proto3.util.equals(MsgConfirmLogicCall, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgConfirmLogicCallResponse
 */
export class MsgConfirmLogicCallResponse extends Message<MsgConfirmLogicCallResponse> {
  constructor(data?: PartialMessage<MsgConfirmLogicCallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgConfirmLogicCallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmLogicCallResponse {
    return new MsgConfirmLogicCallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmLogicCallResponse {
    return new MsgConfirmLogicCallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmLogicCallResponse {
    return new MsgConfirmLogicCallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmLogicCallResponse | PlainMessage<MsgConfirmLogicCallResponse> | undefined, b: MsgConfirmLogicCallResponse | PlainMessage<MsgConfirmLogicCallResponse> | undefined): boolean {
    return proto3.util.equals(MsgConfirmLogicCallResponse, a, b);
  }
}

/**
 * MsgSendToCosmosClaim
 * When more than 66% of the active validator set has
 * claimed to have seen the deposit enter the ethereum blockchain coins are
 * issued to the Cosmos address in question
 * -------------
 *
 * @generated from message gravity.v1.MsgSendToCosmosClaim
 */
export class MsgSendToCosmosClaim extends Message<MsgSendToCosmosClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 eth_block_height = 2;
   */
  ethBlockHeight = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 3;
   */
  tokenContract = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string ethereum_sender = 5;
   */
  ethereumSender = "";

  /**
   * @generated from field: string cosmos_receiver = 6;
   */
  cosmosReceiver = "";

  /**
   * @generated from field: string orchestrator = 7;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgSendToCosmosClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSendToCosmosClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "eth_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ethereum_sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "cosmos_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToCosmosClaim {
    return new MsgSendToCosmosClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToCosmosClaim {
    return new MsgSendToCosmosClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToCosmosClaim {
    return new MsgSendToCosmosClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToCosmosClaim | PlainMessage<MsgSendToCosmosClaim> | undefined, b: MsgSendToCosmosClaim | PlainMessage<MsgSendToCosmosClaim> | undefined): boolean {
    return proto3.util.equals(MsgSendToCosmosClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgSendToCosmosClaimResponse
 */
export class MsgSendToCosmosClaimResponse extends Message<MsgSendToCosmosClaimResponse> {
  constructor(data?: PartialMessage<MsgSendToCosmosClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSendToCosmosClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToCosmosClaimResponse {
    return new MsgSendToCosmosClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToCosmosClaimResponse {
    return new MsgSendToCosmosClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToCosmosClaimResponse {
    return new MsgSendToCosmosClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToCosmosClaimResponse | PlainMessage<MsgSendToCosmosClaimResponse> | undefined, b: MsgSendToCosmosClaimResponse | PlainMessage<MsgSendToCosmosClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgSendToCosmosClaimResponse, a, b);
  }
}

/**
 * MsgExecuteIbcAutoForwards
 * Prompts the forwarding of Pending IBC Auto-Forwards in the queue
 * The Pending forwards will be executed in order of their original SendToCosmos.EventNonce
 * The funds in the queue will be sent to a local gravity-prefixed address if IBC transfer is not possible
 *
 * @generated from message gravity.v1.MsgExecuteIbcAutoForwards
 */
export class MsgExecuteIbcAutoForwards extends Message<MsgExecuteIbcAutoForwards> {
  /**
   * How many queued forwards to clear, be careful about gas limits
   *
   * @generated from field: uint64 forwards_to_clear = 1;
   */
  forwardsToClear = protoInt64.zero;

  /**
   * This message's sender
   *
   * @generated from field: string executor = 2;
   */
  executor = "";

  constructor(data?: PartialMessage<MsgExecuteIbcAutoForwards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgExecuteIbcAutoForwards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forwards_to_clear", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "executor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteIbcAutoForwards {
    return new MsgExecuteIbcAutoForwards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteIbcAutoForwards {
    return new MsgExecuteIbcAutoForwards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteIbcAutoForwards {
    return new MsgExecuteIbcAutoForwards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteIbcAutoForwards | PlainMessage<MsgExecuteIbcAutoForwards> | undefined, b: MsgExecuteIbcAutoForwards | PlainMessage<MsgExecuteIbcAutoForwards> | undefined): boolean {
    return proto3.util.equals(MsgExecuteIbcAutoForwards, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgExecuteIbcAutoForwardsResponse
 */
export class MsgExecuteIbcAutoForwardsResponse extends Message<MsgExecuteIbcAutoForwardsResponse> {
  constructor(data?: PartialMessage<MsgExecuteIbcAutoForwardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgExecuteIbcAutoForwardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteIbcAutoForwardsResponse {
    return new MsgExecuteIbcAutoForwardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteIbcAutoForwardsResponse {
    return new MsgExecuteIbcAutoForwardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteIbcAutoForwardsResponse {
    return new MsgExecuteIbcAutoForwardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteIbcAutoForwardsResponse | PlainMessage<MsgExecuteIbcAutoForwardsResponse> | undefined, b: MsgExecuteIbcAutoForwardsResponse | PlainMessage<MsgExecuteIbcAutoForwardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteIbcAutoForwardsResponse, a, b);
  }
}

/**
 * BatchSendToEthClaim claims that a batch of send to eth
 * operations on the bridge contract was executed.
 *
 * @generated from message gravity.v1.MsgBatchSendToEthClaim
 */
export class MsgBatchSendToEthClaim extends Message<MsgBatchSendToEthClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 eth_block_height = 2;
   */
  ethBlockHeight = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_nonce = 3;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 4;
   */
  tokenContract = "";

  /**
   * @generated from field: string orchestrator = 5;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgBatchSendToEthClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgBatchSendToEthClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "eth_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchSendToEthClaim {
    return new MsgBatchSendToEthClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchSendToEthClaim {
    return new MsgBatchSendToEthClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchSendToEthClaim {
    return new MsgBatchSendToEthClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchSendToEthClaim | PlainMessage<MsgBatchSendToEthClaim> | undefined, b: MsgBatchSendToEthClaim | PlainMessage<MsgBatchSendToEthClaim> | undefined): boolean {
    return proto3.util.equals(MsgBatchSendToEthClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgBatchSendToEthClaimResponse
 */
export class MsgBatchSendToEthClaimResponse extends Message<MsgBatchSendToEthClaimResponse> {
  constructor(data?: PartialMessage<MsgBatchSendToEthClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgBatchSendToEthClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchSendToEthClaimResponse {
    return new MsgBatchSendToEthClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchSendToEthClaimResponse {
    return new MsgBatchSendToEthClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchSendToEthClaimResponse {
    return new MsgBatchSendToEthClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchSendToEthClaimResponse | PlainMessage<MsgBatchSendToEthClaimResponse> | undefined, b: MsgBatchSendToEthClaimResponse | PlainMessage<MsgBatchSendToEthClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchSendToEthClaimResponse, a, b);
  }
}

/**
 * ERC20DeployedClaim allows the Cosmos module
 * to learn about an ERC20 that someone deployed
 * to represent a Cosmos asset
 *
 * @generated from message gravity.v1.MsgERC20DeployedClaim
 */
export class MsgERC20DeployedClaim extends Message<MsgERC20DeployedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 eth_block_height = 2;
   */
  ethBlockHeight = protoInt64.zero;

  /**
   * @generated from field: string cosmos_denom = 3;
   */
  cosmosDenom = "";

  /**
   * @generated from field: string token_contract = 4;
   */
  tokenContract = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string symbol = 6;
   */
  symbol = "";

  /**
   * @generated from field: uint64 decimals = 7;
   */
  decimals = protoInt64.zero;

  /**
   * @generated from field: string orchestrator = 8;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgERC20DeployedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgERC20DeployedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "eth_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgERC20DeployedClaim | PlainMessage<MsgERC20DeployedClaim> | undefined, b: MsgERC20DeployedClaim | PlainMessage<MsgERC20DeployedClaim> | undefined): boolean {
    return proto3.util.equals(MsgERC20DeployedClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgERC20DeployedClaimResponse
 */
export class MsgERC20DeployedClaimResponse extends Message<MsgERC20DeployedClaimResponse> {
  constructor(data?: PartialMessage<MsgERC20DeployedClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgERC20DeployedClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgERC20DeployedClaimResponse | PlainMessage<MsgERC20DeployedClaimResponse> | undefined, b: MsgERC20DeployedClaimResponse | PlainMessage<MsgERC20DeployedClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgERC20DeployedClaimResponse, a, b);
  }
}

/**
 * This informs the Cosmos module that a logic
 * call has been executed
 *
 * @generated from message gravity.v1.MsgLogicCallExecutedClaim
 */
export class MsgLogicCallExecutedClaim extends Message<MsgLogicCallExecutedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 eth_block_height = 2;
   */
  ethBlockHeight = protoInt64.zero;

  /**
   * @generated from field: bytes invalidation_id = 3;
   */
  invalidationId = new Uint8Array(0);

  /**
   * @generated from field: uint64 invalidation_nonce = 4;
   */
  invalidationNonce = protoInt64.zero;

  /**
   * @generated from field: string orchestrator = 5;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgLogicCallExecutedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgLogicCallExecutedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "eth_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "invalidation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "invalidation_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLogicCallExecutedClaim {
    return new MsgLogicCallExecutedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLogicCallExecutedClaim {
    return new MsgLogicCallExecutedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLogicCallExecutedClaim {
    return new MsgLogicCallExecutedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLogicCallExecutedClaim | PlainMessage<MsgLogicCallExecutedClaim> | undefined, b: MsgLogicCallExecutedClaim | PlainMessage<MsgLogicCallExecutedClaim> | undefined): boolean {
    return proto3.util.equals(MsgLogicCallExecutedClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgLogicCallExecutedClaimResponse
 */
export class MsgLogicCallExecutedClaimResponse extends Message<MsgLogicCallExecutedClaimResponse> {
  constructor(data?: PartialMessage<MsgLogicCallExecutedClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgLogicCallExecutedClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLogicCallExecutedClaimResponse {
    return new MsgLogicCallExecutedClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLogicCallExecutedClaimResponse {
    return new MsgLogicCallExecutedClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLogicCallExecutedClaimResponse {
    return new MsgLogicCallExecutedClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLogicCallExecutedClaimResponse | PlainMessage<MsgLogicCallExecutedClaimResponse> | undefined, b: MsgLogicCallExecutedClaimResponse | PlainMessage<MsgLogicCallExecutedClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgLogicCallExecutedClaimResponse, a, b);
  }
}

/**
 * This informs the Cosmos module that a validator
 * set has been updated.
 *
 * @generated from message gravity.v1.MsgValsetUpdatedClaim
 */
export class MsgValsetUpdatedClaim extends Message<MsgValsetUpdatedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 valset_nonce = 2;
   */
  valsetNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 eth_block_height = 3;
   */
  ethBlockHeight = protoInt64.zero;

  /**
   * @generated from field: repeated gravity.v1.BridgeValidator members = 4;
   */
  members: BridgeValidator[] = [];

  /**
   * @generated from field: string reward_amount = 5;
   */
  rewardAmount = "";

  /**
   * @generated from field: string reward_token = 6;
   */
  rewardToken = "";

  /**
   * @generated from field: string orchestrator = 7;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgValsetUpdatedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgValsetUpdatedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "eth_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 5, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetUpdatedClaim | PlainMessage<MsgValsetUpdatedClaim> | undefined, b: MsgValsetUpdatedClaim | PlainMessage<MsgValsetUpdatedClaim> | undefined): boolean {
    return proto3.util.equals(MsgValsetUpdatedClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgValsetUpdatedClaimResponse
 */
export class MsgValsetUpdatedClaimResponse extends Message<MsgValsetUpdatedClaimResponse> {
  constructor(data?: PartialMessage<MsgValsetUpdatedClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgValsetUpdatedClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetUpdatedClaimResponse | PlainMessage<MsgValsetUpdatedClaimResponse> | undefined, b: MsgValsetUpdatedClaimResponse | PlainMessage<MsgValsetUpdatedClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgValsetUpdatedClaimResponse, a, b);
  }
}

/**
 * This call allows the sender (and only the sender)
 * to cancel a given MsgSendToEth and recieve a refund
 * of the tokens
 *
 * @generated from message gravity.v1.MsgCancelSendToEth
 */
export class MsgCancelSendToEth extends Message<MsgCancelSendToEth> {
  /**
   * @generated from field: uint64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgCancelSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgCancelSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSendToEth | PlainMessage<MsgCancelSendToEth> | undefined, b: MsgCancelSendToEth | PlainMessage<MsgCancelSendToEth> | undefined): boolean {
    return proto3.util.equals(MsgCancelSendToEth, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgCancelSendToEthResponse
 */
export class MsgCancelSendToEthResponse extends Message<MsgCancelSendToEthResponse> {
  constructor(data?: PartialMessage<MsgCancelSendToEthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgCancelSendToEthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSendToEthResponse | PlainMessage<MsgCancelSendToEthResponse> | undefined, b: MsgCancelSendToEthResponse | PlainMessage<MsgCancelSendToEthResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelSendToEthResponse, a, b);
  }
}

/**
 * This call allows anyone to submit evidence that a
 * validator has signed a valset, batch, or logic call that never
 * existed on the Cosmos chain. 
 * Subject contains the batch, valset, or logic call.
 *
 * @generated from message gravity.v1.MsgSubmitBadSignatureEvidence
 */
export class MsgSubmitBadSignatureEvidence extends Message<MsgSubmitBadSignatureEvidence> {
  /**
   * @generated from field: google.protobuf.Any subject = 1;
   */
  subject?: Any;

  /**
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * @generated from field: string sender = 3;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgSubmitBadSignatureEvidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSubmitBadSignatureEvidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "message", T: Any },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBadSignatureEvidence | PlainMessage<MsgSubmitBadSignatureEvidence> | undefined, b: MsgSubmitBadSignatureEvidence | PlainMessage<MsgSubmitBadSignatureEvidence> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBadSignatureEvidence, a, b);
  }
}

/**
 * @generated from message gravity.v1.MsgSubmitBadSignatureEvidenceResponse
 */
export class MsgSubmitBadSignatureEvidenceResponse extends Message<MsgSubmitBadSignatureEvidenceResponse> {
  constructor(data?: PartialMessage<MsgSubmitBadSignatureEvidenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.MsgSubmitBadSignatureEvidenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBadSignatureEvidenceResponse | PlainMessage<MsgSubmitBadSignatureEvidenceResponse> | undefined, b: MsgSubmitBadSignatureEvidenceResponse | PlainMessage<MsgSubmitBadSignatureEvidenceResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBadSignatureEvidenceResponse, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventSetOperatorAddress
 */
export class EventSetOperatorAddress extends Message<EventSetOperatorAddress> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<EventSetOperatorAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventSetOperatorAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOperatorAddress {
    return new EventSetOperatorAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOperatorAddress {
    return new EventSetOperatorAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOperatorAddress {
    return new EventSetOperatorAddress().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOperatorAddress | PlainMessage<EventSetOperatorAddress> | undefined, b: EventSetOperatorAddress | PlainMessage<EventSetOperatorAddress> | undefined): boolean {
    return proto3.util.equals(EventSetOperatorAddress, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventValsetConfirmKey
 */
export class EventValsetConfirmKey extends Message<EventValsetConfirmKey> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<EventValsetConfirmKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventValsetConfirmKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValsetConfirmKey {
    return new EventValsetConfirmKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValsetConfirmKey {
    return new EventValsetConfirmKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValsetConfirmKey {
    return new EventValsetConfirmKey().fromJsonString(jsonString, options);
  }

  static equals(a: EventValsetConfirmKey | PlainMessage<EventValsetConfirmKey> | undefined, b: EventValsetConfirmKey | PlainMessage<EventValsetConfirmKey> | undefined): boolean {
    return proto3.util.equals(EventValsetConfirmKey, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventBatchCreated
 */
export class EventBatchCreated extends Message<EventBatchCreated> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string batch_nonce = 2;
   */
  batchNonce = "";

  constructor(data?: PartialMessage<EventBatchCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventBatchCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "batch_nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBatchCreated {
    return new EventBatchCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBatchCreated {
    return new EventBatchCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBatchCreated {
    return new EventBatchCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EventBatchCreated | PlainMessage<EventBatchCreated> | undefined, b: EventBatchCreated | PlainMessage<EventBatchCreated> | undefined): boolean {
    return proto3.util.equals(EventBatchCreated, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventBatchConfirmKey
 */
export class EventBatchConfirmKey extends Message<EventBatchConfirmKey> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string batch_confirm_key = 2;
   */
  batchConfirmKey = "";

  constructor(data?: PartialMessage<EventBatchConfirmKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventBatchConfirmKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "batch_confirm_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBatchConfirmKey {
    return new EventBatchConfirmKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBatchConfirmKey {
    return new EventBatchConfirmKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBatchConfirmKey {
    return new EventBatchConfirmKey().fromJsonString(jsonString, options);
  }

  static equals(a: EventBatchConfirmKey | PlainMessage<EventBatchConfirmKey> | undefined, b: EventBatchConfirmKey | PlainMessage<EventBatchConfirmKey> | undefined): boolean {
    return proto3.util.equals(EventBatchConfirmKey, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventBatchSendToEthClaim
 */
export class EventBatchSendToEthClaim extends Message<EventBatchSendToEthClaim> {
  /**
   * @generated from field: string nonce = 1;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventBatchSendToEthClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventBatchSendToEthClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBatchSendToEthClaim {
    return new EventBatchSendToEthClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBatchSendToEthClaim {
    return new EventBatchSendToEthClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBatchSendToEthClaim {
    return new EventBatchSendToEthClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventBatchSendToEthClaim | PlainMessage<EventBatchSendToEthClaim> | undefined, b: EventBatchSendToEthClaim | PlainMessage<EventBatchSendToEthClaim> | undefined): boolean {
    return proto3.util.equals(EventBatchSendToEthClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventClaim
 */
export class EventClaim extends Message<EventClaim> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string claim_hash = 2;
   */
  claimHash = "";

  /**
   * @generated from field: string attestation_id = 3;
   */
  attestationId = "";

  constructor(data?: PartialMessage<EventClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "claim_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClaim {
    return new EventClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClaim {
    return new EventClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClaim {
    return new EventClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventClaim | PlainMessage<EventClaim> | undefined, b: EventClaim | PlainMessage<EventClaim> | undefined): boolean {
    return proto3.util.equals(EventClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventBadSignatureEvidence
 */
export class EventBadSignatureEvidence extends Message<EventBadSignatureEvidence> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string bad_eth_signature = 2;
   */
  badEthSignature = "";

  /**
   * @generated from field: string bad_eth_signature_subject = 3;
   */
  badEthSignatureSubject = "";

  constructor(data?: PartialMessage<EventBadSignatureEvidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventBadSignatureEvidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bad_eth_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bad_eth_signature_subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBadSignatureEvidence {
    return new EventBadSignatureEvidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBadSignatureEvidence {
    return new EventBadSignatureEvidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBadSignatureEvidence {
    return new EventBadSignatureEvidence().fromJsonString(jsonString, options);
  }

  static equals(a: EventBadSignatureEvidence | PlainMessage<EventBadSignatureEvidence> | undefined, b: EventBadSignatureEvidence | PlainMessage<EventBadSignatureEvidence> | undefined): boolean {
    return proto3.util.equals(EventBadSignatureEvidence, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventERC20DeployedClaim
 */
export class EventERC20DeployedClaim extends Message<EventERC20DeployedClaim> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string nonce = 2;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventERC20DeployedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventERC20DeployedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventERC20DeployedClaim | PlainMessage<EventERC20DeployedClaim> | undefined, b: EventERC20DeployedClaim | PlainMessage<EventERC20DeployedClaim> | undefined): boolean {
    return proto3.util.equals(EventERC20DeployedClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventValsetUpdatedClaim
 */
export class EventValsetUpdatedClaim extends Message<EventValsetUpdatedClaim> {
  /**
   * @generated from field: string nonce = 1;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventValsetUpdatedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventValsetUpdatedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValsetUpdatedClaim {
    return new EventValsetUpdatedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValsetUpdatedClaim {
    return new EventValsetUpdatedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValsetUpdatedClaim {
    return new EventValsetUpdatedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventValsetUpdatedClaim | PlainMessage<EventValsetUpdatedClaim> | undefined, b: EventValsetUpdatedClaim | PlainMessage<EventValsetUpdatedClaim> | undefined): boolean {
    return proto3.util.equals(EventValsetUpdatedClaim, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventMultisigUpdateRequest
 */
export class EventMultisigUpdateRequest extends Message<EventMultisigUpdateRequest> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: string bridge_chain_id = 2;
   */
  bridgeChainId = "";

  /**
   * @generated from field: string multisig_id = 3;
   */
  multisigId = "";

  /**
   * @generated from field: string nonce = 4;
   */
  nonce = "";

  constructor(data?: PartialMessage<EventMultisigUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventMultisigUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "multisig_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventMultisigUpdateRequest {
    return new EventMultisigUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventMultisigUpdateRequest {
    return new EventMultisigUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventMultisigUpdateRequest {
    return new EventMultisigUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventMultisigUpdateRequest | PlainMessage<EventMultisigUpdateRequest> | undefined, b: EventMultisigUpdateRequest | PlainMessage<EventMultisigUpdateRequest> | undefined): boolean {
    return proto3.util.equals(EventMultisigUpdateRequest, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventOutgoingLogicCallCanceled
 */
export class EventOutgoingLogicCallCanceled extends Message<EventOutgoingLogicCallCanceled> {
  /**
   * @generated from field: string logic_call_invalidation_id = 1;
   */
  logicCallInvalidationId = "";

  /**
   * @generated from field: string logic_call_invalidation_nonce = 2;
   */
  logicCallInvalidationNonce = "";

  constructor(data?: PartialMessage<EventOutgoingLogicCallCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventOutgoingLogicCallCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logic_call_invalidation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logic_call_invalidation_nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingLogicCallCanceled {
    return new EventOutgoingLogicCallCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingLogicCallCanceled {
    return new EventOutgoingLogicCallCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingLogicCallCanceled {
    return new EventOutgoingLogicCallCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingLogicCallCanceled | PlainMessage<EventOutgoingLogicCallCanceled> | undefined, b: EventOutgoingLogicCallCanceled | PlainMessage<EventOutgoingLogicCallCanceled> | undefined): boolean {
    return proto3.util.equals(EventOutgoingLogicCallCanceled, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventSignatureSlashing
 */
export class EventSignatureSlashing extends Message<EventSignatureSlashing> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<EventSignatureSlashing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventSignatureSlashing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSignatureSlashing {
    return new EventSignatureSlashing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSignatureSlashing {
    return new EventSignatureSlashing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSignatureSlashing {
    return new EventSignatureSlashing().fromJsonString(jsonString, options);
  }

  static equals(a: EventSignatureSlashing | PlainMessage<EventSignatureSlashing> | undefined, b: EventSignatureSlashing | PlainMessage<EventSignatureSlashing> | undefined): boolean {
    return proto3.util.equals(EventSignatureSlashing, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventOutgoingTxId
 */
export class EventOutgoingTxId extends Message<EventOutgoingTxId> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string tx_id = 2;
   */
  txId = "";

  constructor(data?: PartialMessage<EventOutgoingTxId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventOutgoingTxId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingTxId {
    return new EventOutgoingTxId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingTxId {
    return new EventOutgoingTxId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingTxId {
    return new EventOutgoingTxId().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingTxId | PlainMessage<EventOutgoingTxId> | undefined, b: EventOutgoingTxId | PlainMessage<EventOutgoingTxId> | undefined): boolean {
    return proto3.util.equals(EventOutgoingTxId, a, b);
  }
}

/**
 * @generated from message gravity.v1.EventSendToEthFeeCollected
 */
export class EventSendToEthFeeCollected extends Message<EventSendToEthFeeCollected> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string send_amount = 2;
   */
  sendAmount = "";

  /**
   * @generated from field: string fee_amount = 3;
   */
  feeAmount = "";

  constructor(data?: PartialMessage<EventSendToEthFeeCollected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gravity.v1.EventSendToEthFeeCollected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSendToEthFeeCollected {
    return new EventSendToEthFeeCollected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSendToEthFeeCollected {
    return new EventSendToEthFeeCollected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSendToEthFeeCollected {
    return new EventSendToEthFeeCollected().fromJsonString(jsonString, options);
  }

  static equals(a: EventSendToEthFeeCollected | PlainMessage<EventSendToEthFeeCollected> | undefined, b: EventSendToEthFeeCollected | PlainMessage<EventSendToEthFeeCollected> | undefined): boolean {
    return proto3.util.equals(EventSendToEthFeeCollected, a, b);
  }
}

