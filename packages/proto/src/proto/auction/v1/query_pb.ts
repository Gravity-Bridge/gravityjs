// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file auction/v1/query.proto (package auction.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Auction, AuctionPeriod } from "./auction_pb.js";
import { Coin } from "../../cosmos/base/coin";

/**
 * @generated from message auction.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: auction.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionPeriodRequest
 */
export class QueryAuctionPeriodRequest extends Message<QueryAuctionPeriodRequest> {
  constructor(data?: PartialMessage<QueryAuctionPeriodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionPeriodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionPeriodRequest {
    return new QueryAuctionPeriodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionPeriodRequest {
    return new QueryAuctionPeriodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionPeriodRequest {
    return new QueryAuctionPeriodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionPeriodRequest | PlainMessage<QueryAuctionPeriodRequest> | undefined, b: QueryAuctionPeriodRequest | PlainMessage<QueryAuctionPeriodRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionPeriodRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionPeriodResponse
 */
export class QueryAuctionPeriodResponse extends Message<QueryAuctionPeriodResponse> {
  /**
   * @generated from field: auction.v1.AuctionPeriod auction_period = 1;
   */
  auctionPeriod?: AuctionPeriod;

  constructor(data?: PartialMessage<QueryAuctionPeriodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionPeriodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_period", kind: "message", T: AuctionPeriod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionPeriodResponse {
    return new QueryAuctionPeriodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionPeriodResponse {
    return new QueryAuctionPeriodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionPeriodResponse {
    return new QueryAuctionPeriodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionPeriodResponse | PlainMessage<QueryAuctionPeriodResponse> | undefined, b: QueryAuctionPeriodResponse | PlainMessage<QueryAuctionPeriodResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionPeriodResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionsRequest
 */
export class QueryAuctionsRequest extends Message<QueryAuctionsRequest> {
  constructor(data?: PartialMessage<QueryAuctionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionsRequest | PlainMessage<QueryAuctionsRequest> | undefined, b: QueryAuctionsRequest | PlainMessage<QueryAuctionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionsRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionsResponse
 */
export class QueryAuctionsResponse extends Message<QueryAuctionsResponse> {
  /**
   * @generated from field: repeated auction.v1.Auction auctions = 1;
   */
  auctions: Auction[] = [];

  constructor(data?: PartialMessage<QueryAuctionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auctions", kind: "message", T: Auction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionsResponse | PlainMessage<QueryAuctionsResponse> | undefined, b: QueryAuctionsResponse | PlainMessage<QueryAuctionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionsResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionByIdRequest
 */
export class QueryAuctionByIdRequest extends Message<QueryAuctionByIdRequest> {
  /**
   * @generated from field: uint64 auction_id = 1;
   */
  auctionId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryAuctionByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionByIdRequest {
    return new QueryAuctionByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionByIdRequest {
    return new QueryAuctionByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionByIdRequest {
    return new QueryAuctionByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionByIdRequest | PlainMessage<QueryAuctionByIdRequest> | undefined, b: QueryAuctionByIdRequest | PlainMessage<QueryAuctionByIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionByIdRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionByIdResponse
 */
export class QueryAuctionByIdResponse extends Message<QueryAuctionByIdResponse> {
  /**
   * @generated from field: auction.v1.Auction auction = 1;
   */
  auction?: Auction;

  constructor(data?: PartialMessage<QueryAuctionByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction", kind: "message", T: Auction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionByIdResponse {
    return new QueryAuctionByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionByIdResponse {
    return new QueryAuctionByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionByIdResponse {
    return new QueryAuctionByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionByIdResponse | PlainMessage<QueryAuctionByIdResponse> | undefined, b: QueryAuctionByIdResponse | PlainMessage<QueryAuctionByIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionByIdResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionByDenomRequest
 */
export class QueryAuctionByDenomRequest extends Message<QueryAuctionByDenomRequest> {
  /**
   * @generated from field: string auction_denom = 1;
   */
  auctionDenom = "";

  constructor(data?: PartialMessage<QueryAuctionByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionByDenomRequest {
    return new QueryAuctionByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionByDenomRequest {
    return new QueryAuctionByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionByDenomRequest {
    return new QueryAuctionByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionByDenomRequest | PlainMessage<QueryAuctionByDenomRequest> | undefined, b: QueryAuctionByDenomRequest | PlainMessage<QueryAuctionByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionByDenomRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionByDenomResponse
 */
export class QueryAuctionByDenomResponse extends Message<QueryAuctionByDenomResponse> {
  /**
   * @generated from field: auction.v1.Auction auction = 1;
   */
  auction?: Auction;

  constructor(data?: PartialMessage<QueryAuctionByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction", kind: "message", T: Auction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionByDenomResponse {
    return new QueryAuctionByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionByDenomResponse {
    return new QueryAuctionByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionByDenomResponse {
    return new QueryAuctionByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionByDenomResponse | PlainMessage<QueryAuctionByDenomResponse> | undefined, b: QueryAuctionByDenomResponse | PlainMessage<QueryAuctionByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionByDenomResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAllAuctionsByBidderRequest
 */
export class QueryAllAuctionsByBidderRequest extends Message<QueryAllAuctionsByBidderRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAllAuctionsByBidderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAllAuctionsByBidderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAuctionsByBidderRequest {
    return new QueryAllAuctionsByBidderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAuctionsByBidderRequest {
    return new QueryAllAuctionsByBidderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAuctionsByBidderRequest {
    return new QueryAllAuctionsByBidderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAuctionsByBidderRequest | PlainMessage<QueryAllAuctionsByBidderRequest> | undefined, b: QueryAllAuctionsByBidderRequest | PlainMessage<QueryAllAuctionsByBidderRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllAuctionsByBidderRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAllAuctionsByBidderResponse
 */
export class QueryAllAuctionsByBidderResponse extends Message<QueryAllAuctionsByBidderResponse> {
  /**
   * @generated from field: repeated auction.v1.Auction auctions = 1;
   */
  auctions: Auction[] = [];

  constructor(data?: PartialMessage<QueryAllAuctionsByBidderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAllAuctionsByBidderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auctions", kind: "message", T: Auction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAuctionsByBidderResponse {
    return new QueryAllAuctionsByBidderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAuctionsByBidderResponse {
    return new QueryAllAuctionsByBidderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAuctionsByBidderResponse {
    return new QueryAllAuctionsByBidderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAuctionsByBidderResponse | PlainMessage<QueryAllAuctionsByBidderResponse> | undefined, b: QueryAllAuctionsByBidderResponse | PlainMessage<QueryAllAuctionsByBidderResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllAuctionsByBidderResponse, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionPoolRequest
 */
export class QueryAuctionPoolRequest extends Message<QueryAuctionPoolRequest> {
  constructor(data?: PartialMessage<QueryAuctionPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionPoolRequest {
    return new QueryAuctionPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionPoolRequest {
    return new QueryAuctionPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionPoolRequest {
    return new QueryAuctionPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionPoolRequest | PlainMessage<QueryAuctionPoolRequest> | undefined, b: QueryAuctionPoolRequest | PlainMessage<QueryAuctionPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionPoolRequest, a, b);
  }
}

/**
 * @generated from message auction.v1.QueryAuctionPoolResponse
 */
export class QueryAuctionPoolResponse extends Message<QueryAuctionPoolResponse> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin balances = 2;
   */
  balances: Coin[] = [];

  constructor(data?: PartialMessage<QueryAuctionPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.QueryAuctionPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balances", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionPoolResponse {
    return new QueryAuctionPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionPoolResponse {
    return new QueryAuctionPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionPoolResponse {
    return new QueryAuctionPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionPoolResponse | PlainMessage<QueryAuctionPoolResponse> | undefined, b: QueryAuctionPoolResponse | PlainMessage<QueryAuctionPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionPoolResponse, a, b);
  }
}
