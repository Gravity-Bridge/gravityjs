// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file auction/v1/msgs.proto (package auction.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * MsgBid is a message type for placing a bid on an auction with given `auction_id`
 * `bidder` is the signer of the Msg
 * `amount` is the native token amount locked by the auction module if the bid is accepted as the highest bid
 * `bid_fee` is the native token amount sent to the auction pool, and should be at least equal to the min bid fee param
 *
 * Additionally, all bids must meet or exceed `min_bid_amount`
 *
 * @generated from message auction.v1.MsgBid
 */
export class MsgBid extends Message<MsgBid> {
  /**
   * ID of the auction to bid on
   *
   * @generated from field: uint64 auction_id = 1;
   */
  auctionId = protoInt64.zero;

  /**
   * Address of the bidder
   *
   * @generated from field: string bidder = 2;
   */
  bidder = "";

  /**
   * Amount of the bid
   *
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * Fee amount
   *
   * @generated from field: uint64 bid_fee = 4;
   */
  bidFee = protoInt64.zero;

  constructor(data?: PartialMessage<MsgBid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.MsgBid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "bid_fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBid {
    return new MsgBid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBid {
    return new MsgBid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBid {
    return new MsgBid().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBid | PlainMessage<MsgBid> | undefined, b: MsgBid | PlainMessage<MsgBid> | undefined): boolean {
    return proto3.util.equals(MsgBid, a, b);
  }
}

/**
 * @generated from message auction.v1.MsgBidResponse
 */
export class MsgBidResponse extends Message<MsgBidResponse> {
  constructor(data?: PartialMessage<MsgBidResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auction.v1.MsgBidResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBidResponse {
    return new MsgBidResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBidResponse {
    return new MsgBidResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBidResponse {
    return new MsgBidResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBidResponse | PlainMessage<MsgBidResponse> | undefined, b: MsgBidResponse | PlainMessage<MsgBidResponse> | undefined): boolean {
    return proto3.util.equals(MsgBidResponse, a, b);
  }
}

